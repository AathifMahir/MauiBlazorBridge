@namespace MauiBlazorBridge
@inject IBridge Bridge
@implements IAsyncDisposable

@if(idiom == DeviceFormFactor.Mobile)
{
    @if(Mobile is not null)
    {
        @Mobile
    }
    else if (TabletAndMobile is not null)
    {
        @TabletAndMobile
    }
    else if (DesktopAndMobile is not null)
    {
        @DesktopAndMobile
    }
    else
    {
        @Default
    }
}
else if (idiom == DeviceFormFactor.Tablet)
{
    @if(Tablet is not null)
    {
        @Tablet
    }
    else if (TabletAndMobile is not null)
    {
        @TabletAndMobile
    }
    else if (DesktopAndTablet is not null)
    {
        @DesktopAndTablet
    }
    else
    {
        @Default
    }
}
else if (idiom == DeviceFormFactor.Desktop)
{
    @if(Desktop is not null)
    {
        @Desktop
    }
    else if (DesktopAndTablet is not null)
    {
        @DesktopAndTablet
    }
    else if (DesktopAndMobile is not null)
    {
        @DesktopAndMobile
    }
    else
    {
        @Default
    }
}
else
{
    @Default
}


@code {
    [Parameter]
    public RenderFragment? Desktop { get; set; }

    [Parameter]
    public RenderFragment? Tablet { get; set; }

    [Parameter]
    public RenderFragment? Mobile { get; set; }

    [Parameter]
    public RenderFragment? Default { get; set; }

    [Parameter]
    public RenderFragment? DesktopAndTablet { get; set; }

    [Parameter]
    public RenderFragment? DesktopAndMobile { get; set; }

    [Parameter]
    public RenderFragment? TabletAndMobile { get; set; }

    [Parameter]
    public EventCallback<DeviceFormFactor> FormFactorChanged { get; set; }

    [Parameter]
    public bool Listener { get; set; } = true;


    private BridgeContext? _bridgeContext;
    DeviceFormFactor idiom = DeviceFormFactor.Unknown;

    protected override void OnInitialized()
    {
        idiom = Bridge.FormFactor;
        base.OnInitialized();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            idiom = Bridge.FormFactor;

            if (!Listener) return;

            _bridgeContext = await BridgeContext.CreateAsync(Bridge, async (f) =>
            {
                idiom = f;
                await FormFactorChanged.InvokeAsync(f);
                StateHasChanged();
            });
        }
    }

    public async ValueTask DisposeAsync()
    {
        if(Listener && _bridgeContext is not null)
        {
            await _bridgeContext.DisposeAsync();
        }
    }

}
